---
import Main from "../layouts/Main.astro";
// edit map: https://umap.openstreetmap.fr/en/map/anonymous-edit/1030519:C1Kw6cUMqXnU6KZloIwgBKMk87isAZ9LdWPvlmxYaoA
// https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png

import { getCollection } from "astro:content";
const venues = await getCollection("venues");
venues.sort((a, b) => {
  return a.data.title.localeCompare(b.data.title);
});
---

<Main title="Map">
  <div class="flex justify-center w-full h-full">
    <div
      id="map"
      class="w-full max-w-(--breakpoint-2xl) h-full border border-gray-500">
    </div>
  </div>

  <script>
    import maplibregl from "maplibre-gl";
    import "maplibre-gl/dist/maplibre-gl.css";

    const venues = (await (await fetch("/venues-geo.json")).json())?.features;

    const venueBounds = venues.reduce((bounds, venue) => {
      const lon_lat = venue.geometry.coordinates;
      return bounds.extend(lon_lat);
    }, new maplibregl.LngLatBounds());

    const map = new maplibregl.Map({
      container: "map", // container id
      center: [54.799843882509094, -2.1709094326946614].reverse(), // starting position [lng, lat]
      zoom: 4.8, // starting zoom
      style: "/mapstyle-positron-ar-maptiler.json", // style URL
    });

    map.on("load", () => {
      map.addSource("venues", {
        type: "geojson",
        data: "/venues-geo.json",
        cluster: true,
        clusterMaxZoom: 14, // Max zoom to cluster points on
        clusterRadius: 25, // Radius of each cluster when clustering points (defaults to 50)
      });

      map.addLayer({
        id: "clusters",
        type: "circle",
        source: "venues",
        filter: ["has", "point_count"],
        paint: {
          // Use step expressions (https://maplibre.org/maplibre-style-spec/#expressions-step)
          // with three steps to implement three types of circles:
          //   * Blue, 20px circles when point count is less than 100
          //   * Yellow, 30px circles when point count is between 100 and 750
          //   * Pink, 40px circles when point count is greater than or equal to 750
          "circle-color": [
            "step",
            ["get", "point_count"],
            "#999",
            100,
            "#999",
            750,
            "#999",
          ],
          "circle-radius": [
            "step",
            ["get", "point_count"],
            11,
            10,
            // 14,
            // 10,
            13,
          ],
        },
      });

      map.addLayer({
        id: "cluster-count",
        type: "symbol",
        source: "venues",
        filter: ["has", "point_count"],
        layout: {
          "text-field": "{point_count_abbreviated}",
          "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
          "text-size": 12,
        },
        paint: {
          "text-color": "#fff",
        },
      });

      map.addLayer({
        id: "unclustered-point",
        type: "circle",
        source: "venues",
        filter: ["!", ["has", "point_count"]],
        paint: {
          "circle-color": "#999",
          "circle-radius": 8,
          "circle-stroke-width": 1,
          "circle-stroke-color": "#fff",
        },
      });

      map.fitBounds(venueBounds, {
        padding: { top: 50, bottom: 50, left: 50, right: 50 },
      });

      // inspect a cluster on click
      map.on("click", "clusters", async (e) => {
        const features = map.queryRenderedFeatures(e.point, {
          layers: ["clusters"],
        });
        const clusterId = features[0].properties.cluster_id;
        const zoom = await map
          .getSource("venues")
          .getClusterExpansionZoom(clusterId);
        map.easeTo({
          center: features[0].geometry.coordinates,
          zoom,
        });
      });

      // When a click event occurs on a feature in
      // the unclustered-point layer, open a popup at
      // the location of the feature, with
      // description HTML from its properties.
      map.on("click", "unclustered-point", (e) => {
        const venue = e.features[0]?.properties;
        const coordinates = e.features[0].geometry.coordinates.slice();


        // Ensure that if the map is zoomed out such that
        // multiple copies of the feature are visible, the
        // popup appears over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        new maplibregl.Popup()
          .setLngLat(coordinates)
          .setMaxWidth("80vw")
          .setHTML(
            `<h3 class="xtext-black xfont-default pb-2">${venue.title}</h3>
              <p class="text-lg/6">${venue.bodyHtml}</p>
              <p><a class="text-xs font-italic text-black underline!" href="https://google.com/maps/search/?api=1&query=${venue.title}, ${venue.town}, UK" target="_map">${venue.address}</a></p>
                    `
          )

          .addTo(map);
      });

      map.on("mouseenter", "clusters", () => {
        map.getCanvas().style.cursor = "pointer";
      });
      map.on("mouseleave", "clusters", () => {
        map.getCanvas().style.cursor = "";
      });

      const popup = new maplibregl.Popup({
        closeButton: false,
        closeOnClick: false,
      });

      // Make sure to detect marker change for overlapping markers
      // and use mousemove instead of mouseenter event
      let currentFeatureCoordinates = undefined;
      map.on("mousemove", "unclustered-point", (e) => {
        const featureCoordinates =
          e.features[0].geometry.coordinates.toString();
        if (currentFeatureCoordinates !== featureCoordinates) {
          currentFeatureCoordinates = featureCoordinates;

          // Change the cursor style as a UI indicator.
          map.getCanvas().style.cursor = "pointer";

          const coordinates = e.features[0].geometry.coordinates.slice();
          const description = e.features[0].properties.title;

          // Ensure that if the map is zoomed out such that multiple
          // copies of the feature are visible, the popup appears
          // over the copy being pointed to.
          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
          }

          // Populate the popup and set its coordinates
          // based on the feature found.
          popup.setLngLat(coordinates).setHTML(description).addTo(map);
        }
      });

      map.on("mouseleave", "unclustered-point", () => {
        currentFeatureCoordinates = undefined;
        map.getCanvas().style.cursor = "";
        popup.remove();
      });
    });
  </script>
  <style is:inline>
    /* @reference "@src/styles/global.css"; */
    .leaflet-container {
      font-family: "Fredoka Variable", sans-serif;
    }
    .maplibregl-popup-close-button {
      display: none !important;
    }
    .maplibregl-popup-content {
      font-family: "Fredoka Variable", sans-serif;
      line-height: 1;
      box-shadow: none !important;
      border: 1px solid #6b7280 !important;
      border-radius: 0 !important;
      background-color: var(--color-gray-100);
      width: auto;

    }
    .leaflet-popup-tip {
      border-bottom: 1px solid #6b7280;
      border-right: 1px solid #6b7280;
    }

    .leaflet-bottom {
      z-index: 1;
    }
    .leaflet-popup-content {
    }

    .mycluster {
      width: 20px;
      height: 15px;
      border: 2px solid #6b7280;
      border-radius: 100%;
      background-color: var(--main-background);
      color: white;
      text-align: center;
      font-size: 0.6rem;
    }
  </style>
</Main>
