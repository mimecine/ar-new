---
import { type CollectionEntry, getCollection } from "astro:content";
import Main from "../../layouts/Main.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import Thumbnail from "../../components/Thumbnail.astro";


export async function getStaticPaths() {
  const venues = await getCollection("venues");
  return venues.map((venue) => ({
    params: { slug: venue.slug },
    props: venue,
  }));
}
type Props = CollectionEntry<"venues">;

const venue = Astro.props;
const { Content } = await venue.render();

const rooms = await getCollection("rooms");
const venue_rooms = rooms.filter((room) => room.data.venue == venue.slug);
const grid_tail_size = new Array(4 - venue_rooms.length % 4);
for (let i = 0; i < grid_tail_size.length; i++) {
  grid_tail_size[i] = i;
}
---
<Main title={`Artist Rooms - ${venue.data.title}`}>
<main data-pagefind-ignore class="w-full">
  <section class="grid w-full place-items-center">
    <div class="w-full">
      <h2>Rooms at {venue.data.title}{venue.data.town && `, ${venue.data.town}`}</h2>
      <Content />

      <section>
        <ul class="flex flex-wrap gap-3 justify-evenly w-full">
          {
            venue_rooms
              .filter((room) => !room.data.hidden)
              .sort((a, b) => {
                 let date = (b.data.enddate || new Date(2100, 1, 1)) - (a.data.enddate || new Date(2100, 1, 1));
                 return date;
               })
              .map((room) => (
                <li class="w-full md:w-1/3 lg:w-1/4 xl:w-1/5 xxl:w-1/6 p-4">
                  <a href={`/rooms/${room.slug}`}>
                    <Thumbnail
                      src={room.data.images[0]}
                      alt={room.data.title}
                      title={room.data.title}
                    >
                      <div class="h-full">
                        {room.data.title && <h5 class="text-balance">{room.data.title}</h5>}
                        <p class="text-sm my-[-0.5rem] italic">
                          <FormattedDate date={room.data.startdate} /> -{" "}
                          {(room.data.enddate && (
                            <FormattedDate date={room.data.enddate} />
                          )) ||
                            `ONGOING`}
                        </p>
                      </div>
                    </Thumbnail>
                  </a>
                </li>
              ))
          }
        {grid_tail_size.map((v, i) => (
            <li class="h-0 w-full md:w-1/3 lg:w-1/4 xl:w-1/5 xxl:w-1/6 p-4">
              <div class="h-full p-2"> <div class="w-full h-64 flex justify-center items-center invisible"> 
                &nbsp;
              </div>  
            </li>
          ))}
        </ul>
      </section>
  
    </div>
  </section>
</main>
</Main>