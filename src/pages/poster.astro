---
import Main from "../layouts/Main.astro";
// edit map: https://umap.openstreetmap.fr/en/map/anonymous-edit/1030519:C1Kw6cUMqXnU6KZloIwgBKMk87isAZ9LdWPvlmxYaoA
// https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png

import { getCollection, getEntry } from "astro:content";
const venues = (await getCollection("venues"))
  .filter( (a) => !a.data.hidden )
  .sort(
    (a, b) => { return a.data.title.localeCompare(b.data.title); }
  );
const rooms = await getCollection("rooms")
const artists = await getCollection("artists");

const years = {};
let year = 2000;
let venue = "";

rooms.sort((a,b)=>{return a.data.startdate.getFullYear() - b.data.startdate.getFullYear() || a.data.venue.localeCompare(b.data.venue)}).map( async room => {
  let year = room.data.startdate.getFullYear().toString();
  //let venue = (await getEntry("venues", room.data.venue)).data.title;
  //console.log(year, venue);
  let venue = `${venues.find(v => v.slug == room.data.venue)?.data.title}, ${venues.find(v => v.slug == room.data.venue)?.data.town}`;
  let town = venues.find(v => v.slug == room.data.venue)?.data.town;
  if(!years[year]) years[year] = {};
  if(!years[year][venue]) years[year][venue] = [];
  years[year][venue].push(room.data.title.replace(/,[^,]+$/,''));
})
console.log(years);

---

<Main title="Summary" data-pagefind-ignore>
      <div class="xflex xjustify-center w-full h-[200mm] p-4">
        <div
          id="map"
          class="w-full max-w-screen-2xl h-[200mm] border border-gray-500">
        </div>
      </div>

      <section class="py-4 break-before-page">
        <h3 class="pl-4 py-8">Artist Rooms Displays by Year</h3>
        <ul class="">
          {Object.keys(years).sort().map( (year, i, arr) => (
              <li class="venue p-4 break-inside-avoid">
                    <h4 class="title" text-pretty text-xl>Rooms on display in {year}</h4>
                    <div class=" columns-1 md:columns-2 lg:columns-3 xl:columns-4 xxl:columns-5">
                    {Object.keys(years[year]).sort((a,b) => { a.localeCompare(b)}).map( (venue, i, arr) => (
                      <p class=""><span class="text-lg">{venue}</span><br/>
                            {years[year][venue].map( (room, i, arr) => (
                              <a class="room" href={`/rooms/${room.replace(/,[^,]+$/,'; ')}`}>
                                {room}; 
                              </a>
                              ))}
                      </p>
                    ))} 
                    </div>
              </li>
          ))}
        </ul>
      </section>

      <section class="py-4 break-before-page">
        <h3 class="pl-4 py-8">Artist Rooms Participating Venues</h3>
        <ul class="columns-1 md:columns-2 lg:columns-3 xl:columns-4 xxl:columns-5">
          {venues.map( venue => (
              <li class="venue p-4 break-inside-avoid">
                    <h4 class="title" text-pretty text-xl>
                        {venue.data.title}{venue.data.town && `, ${venue.data.town}`}&nbsp;<span class="text-xs print:hidden"><a href={`https://google.com/maps/search/?api=1&query=${venue.data.title}, ${venue.data.town}`} target="_map">[info]</a></span></h4>
                    {rooms.filter(room => {
                      return room.data.venue == venue.slug && !room.data.hidden
                    })
                    .map(room => (
                      <a class="room" href={`/rooms/${room.slug}`}>
                        <span class="italic">{room.data.startdate.getFullYear()}:</span> {room.data.title.replace(/,[^,]+$/,'; ')}
                      </a>
                      ))}
              </li>
          ))}
        </ul>
      </section>

  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"
  />
  <script
    is:inline
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""></script>
  <script
    is:inline
    src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"
  ></script>
  <script>
    var loadedHandler = async () => {
      const venues = await (await fetch("/venues.json")).json();

      var map = L.map("map").setView([51.505, -0.09], 13);
      var bounds = L.latLngBounds(); // Instantiate LatLngBounds object
      var markers = L.markerClusterGroup({
        maxClusterRadius: 25,
        iconCreateFunction: function (cluster) {
          var markers = cluster.getAllChildMarkers();
          var n = 0;
          for (var i = 0; i < markers.length; i++) {
            n += markers[i].number;
          }

          return L.divIcon({
            html: '+', //markers.length,
            className: "mycluster",
            iconSize: L.point(20, 20),
          });
        },
        //Disable all of the defaults:
        spiderfyOnMaxZoom: false,
        showCoverageOnHover: false,
        zoomToBoundsOnClick: true,
      });
      // Instantiate MarkerClusterGroup to hold marker clusters

      var lgIcon = L.icon({
        iconUrl: "/map-point.svg",
        iconSize: [20, 20],
        iconAnchor: [10, 10],
        popupAnchor: [0, 0],
      });
      var mdIcon = L.icon({
        iconUrl: "/map-point.svg",
        iconSize: [10, 10],
        iconAnchor: [5, 5],
        popupAnchor: [0, 0],
      });
      var smIcon = L.icon({
        iconUrl: "/map-point.svg",
        iconSize: [5, 5],
        iconAnchor: [3, 2.5],
        popupAnchor: [0, 0],
      });

      L.tileLayer(
        "https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
        {
          maxZoom: 19,
          attribution:
            '&copy; <a href="http://www.openstreetmap.org/copyright">OSM</a>',
        }
      ).addTo(map);

      venues.map((venue) => {
        console.log(`Adding ${venue.data.title}`, venue.data.geo);
        if (venue.data.geo) {
          let geo = JSON.parse(venue.data.geo);
          let lon_lat = geo.coordinates.reverse();
          var marker = L.marker(lon_lat, { icon: mdIcon }).addTo(map);
          let new_year = "";
          var room_string = venue.data.rooms
            .sort((a, b) => new Date(a.date) - new Date(b.date))
            .map((room) => {
              let year = room.date.slice(0, 4);
              if (new_year != year) {
                new_year = year;
                return `<span class="italic">${year}:</span> <a href="/rooms/${room.slug}" class="!text-black !font-[--font-family]">${room.title.replace(/,[^,]+$/, "")}</a>`;
              } else {
                return `<a href="/rooms/${room.slug}" class="!text-black !font-[--font-family]">${room.title.replace(/,[^,]+$/, "")}</a>`;
              }
            })
            .join("; ");
          marker.bindPopup(`
                    <h3 class="text-black !font-[--font-family]">${venue.data.title}</h3>
                    <p class="!text-lg">${room_string}</p>
                    <p><a class="!text-xs !font-italic !text-black !underline" href="https://google.com/maps/search/?api=1&query=${venue.data.title}, ${venue.data.town}, UK" target="_map">${venue.data.address}</a></p>
                    `);
          marker.bindTooltip(venue.data.title); // too ugly!
          bounds.extend(lon_lat);
        }
      });

      map.addLayer(markers);
      map.fitBounds(bounds);
    };

    window.addEventListener("DOMContentLoaded", loadedHandler);
    document.addEventListener("astro:page-load", loadedHandler);
  </script>
  <style is:inline>
    @media print {
      nav {
        x-display: none !important;
        position: relative !important;
      }
      .leaflet-container {
        width: 200mm;
        height: 200mm;
      }
      h1 {display: none;}
    }
    .leaflet-container {
      font-family: "Fredoka Variable", sans-serif;
    }
    .leaflet-popup-content-wrapper {
      box-shadow: none !important;
      border: 1px solid #6b7280 !important;
      border-radius: 0 !important;
      background-color: #d4dadc;
    }
    .leaflet-popup-tip {
      border-bottom: 1px solid #6b7280;
      border-right: 1px solid #6b7280;
    }

    .leaflet-bottom {
      z-index: 1;
    }
    .leaflet-popup-content {
    }
    .leaflet-control-zoom {
      display: none;
    }

    .mycluster {
      width: 20px;
      height: 15px;
      border: 2px solid #6b7280;
      border-radius: 100%;
      background-color: var(--main-background);
      color: white;
      text-align: center;
      font-size: 0.6rem;
    }
  </style>
</Main>
