---
import Main from "../layouts/Main.astro";
// edit map: https://umap.openstreetmap.fr/en/map/anonymous-edit/1030519:C1Kw6cUMqXnU6KZloIwgBKMk87isAZ9LdWPvlmxYaoA
// https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png

import { getCollection, getEntry, render } from "astro:content";
import { marked } from "marked";
const venues = (await getCollection("venues"))
  .filter((a) => !a.data.hidden)
  .sort((a, b) => {
    return a.data.title.localeCompare(b.data.title);
  });
const rooms = await getCollection("rooms");
const artists = await getCollection("artists");

const years = {};
let year = 2000;
let venue = "";

rooms
  .sort((a, b) => {
    return (
      a.data.startdate.getFullYear() - b.data.startdate.getFullYear() ||
      a.data.venue.localeCompare(b.data.venue)
    );
  })
  .map(async (room) => {
    let year = room.data.startdate.getFullYear().toString();
    let venue = `${venues.find((v) => v.id == room.data.venue)?.data.title}, ${venues.find((v) => v.id == room.data.venue)?.data.town}`;
    let town = venues.find((v) => v.id == room.data.venue)?.data.town;
    if (!years[year]) years[year] = {};
    if (!years[year][venue]) years[year][venue] = [];
    // years[year][venue].push(room.data.title.replace(/,[^,]+$/,''));
    years[year][venue].push(room);
  });
---

<Main title="Summary" data-pagefind-ignore>

  <section class="flex justify-center w-full max-h-screen h-[70vh] print:h-[70vh]">
    <div
      id="map"
      class="w-full max-w-(--breakpoint-2xl) h-full print:h-[70vh] border border-gray-500">
    </div>
  </section>

  <section class="py-4 pb-24 break-before-page">
    <h3 class="pl-4 py-8">Artist Rooms by Year</h3>
    <ul class="">
      {
        Object.keys(years)
          .sort()
          .map((year, i, arr) => (
            <li class="venue p-4 break-inside-avoid">
              <h4 class="title" text-pretty text-xl>
                Rooms on display in {year}
              </h4>
              <div class=" columns-1 md:columns-2 lg:columns-3 xl:columns-4 xxl:columns-5 print:columns-2">
                {Object.keys(years[year])
                  .sort((a, b) => {
                    a.localeCompare(b);
                  })
                  .map((venue, i, arr) => (
                    <p class="">
                      <span class="text-lg">{venue}</span>
                      <br />
                      {years[year][venue].map((room, i, arr) => (
                        <a class="room" href={`/rooms/${room.id}`}>
                          {room.data.title
                            .split(",")[0]
                            .replace(/\s/g, "\u00a0")}
                          {i < arr.length - 1 ? "; " : ""}
                        </a>
                      ))}
                    </p>
                  ))}
              </div>
            </li>
          ))
      }
    </ul>
  </section>

  <section class="py-4 pb-8 break-before-page">
    <h3 class="pl-4 py-8">Artist Rooms Participating Venues</h3>
    <ul class="columns-1 md:columns-2 lg:columns-3 xl:columns-4 xxl:columns-5">
      {
        venues.map((venue) => (
          <li class="venue p-4 break-inside-avoid">
            <h4 class="title" text-pretty text-xl>
              {venue.data.title}
              {venue.data.town && `, ${venue.data.town}`}&nbsp;
              <span class="text-xs print:hidden">
                <a
                  href={`https://google.com/maps/search/?api=1&query=${venue.data.title}, ${venue.data.town}`}
                  target="_map">
                  [info]
                </a>
              </span>
            </h4>
            {rooms
              .filter((room) => {
                return room.data.venue == venue.id && !room.data.hidden;
              })
              .map((room) => (
                <a class="room" href={`/rooms/${room.id}`}>
                  <span class="italic">
                    {room.data.startdate.getFullYear()}:
                  </span>{" "}
                  {room.data.title.replace(/,[^,]+$/, "; ")}
                </a>
              ))}
          </li>
        ))
      }
    </ul>
  </section>

  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"
  />
  <script
    is:inline
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""></script>
  <script
    is:inline
    src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"
  ></script>

  <script>

    var loadedHandler = async () => {
      if (window._mapInititialized != null) {
        return;
      } else {
        window._mapInititialized = true;
      }

      const venues = await (await fetch("/venues.json")).json();

      var map = L.map("map").setView([51.505, -0.09], 13);
      var bounds = L.latLngBounds(); // Instantiate LatLngBounds object
      var markers = L.markerClusterGroup({
        maxClusterRadius: 0,
        iconCreateFunction: function (cluster) {
          var markers = cluster.getAllChildMarkers();
          var n = 0;
          for (var i = 0; i < markers.length; i++) {
            n += markers[i].number;
          }
          return L.divIcon({
            html: markers.length,
            className: "mycluster",
            iconSize: L.point(25, 25),
          });
        },
        //Disable all of the defaults:
        spiderfyOnMaxZoom: false,
        showCoverageOnHover: false,
        zoomToBoundsOnClick: true,
      });
      // Instantiate MarkerClusterGroup to hold marker clusters

      var lgIcon = L.icon({
        iconUrl: "/map-point.svg",
        iconSize: [15, 15],
        iconAnchor: [10, 10],
        popupAnchor: [0, 0],
      });
      var mdIcon = L.icon({
        iconUrl: "/map-point.svg",
        iconSize: [10, 10],
        iconAnchor: [5, 5],
        popupAnchor: [0, 0],
      });
      var smIcon = L.icon({
        iconUrl: "/map-point.svg",
        iconSize: [5, 5],
        iconAnchor: [3, 2.5],
        popupAnchor: [0, 0],
      });

      L.tileLayer(
        "https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
        {
          maxZoom: 19,
          attribution:
            '&copy; <a href="http://www.openstreetmap.org/copyright">OSM</a>',
        }
      ).addTo(map);

      venues.map((venue) => {
        if (venue.data.geo) {
          let geo = JSON.parse(venue.data.geo);
          let lon_lat = geo.coordinates.reverse();
          var marker = L.marker(lon_lat, { icon: lgIcon }).addTo(markers);
          let new_year = "";
          var room_string = venue.data.rooms
            .sort(
              (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
            )
            .map((room) => {
              let year = room.date.slice(0, 4);
              if (new_year != year) {
                new_year = year;
                return `<span class="italic">${year}:</span> <a href="/rooms/${room.id}" class="text-black! font-(--font-family)!">${room.title.replace(/,[^,]+$/, "")}</a>`;
              } else {
                return `<a href="/rooms/${room.id}" class="text-black! font-(--font-family)!">${room.title.replace(/,[^,]+$/, "")}</a>`;
              }
            })
            .join("; ");
          marker.bindPopup(`
                    <h3 class="xtext-black xfont-default pb-2">${venue.data.title}</h3>
                    <p class="text-lg/6 ">${room_string}</p>
                    <p><a class="text-xs! !font-italic text-black! underline!" href="https://google.com/maps/search/?api=1&query=${venue.data.title}, ${venue.data.town}, UK" target="_map">${venue.data.address}</a></p>
                    `);
          marker.bindTooltip(venue.data.title); // too ugly!
          bounds.extend(lon_lat);
        }
      });

      map.addLayer(markers);
      console.log(`Bounds now: ${bounds.toBBoxString()}`);
      map.fitBounds(bounds);
    };
    document.addEventListener("astro:page-load", loadedHandler);
    window.addEventListener("DOMContentLoaded", loadedHandler);
  
  </script>
 <style is:inline>
    /* @reference "../../styles/global.css"; */
    .leaflet-container {
      font-family: "Fredoka Variable", sans-serif;
      cursor: var(--cursor-ar-default);
    }
    .leaflet-control-zoom {
      display: none;
    }
    .leaflet-interactive {
      cursor: var(--cursor-ar-pointer);
    }
    .leaflet-popup-content-wrapper {
      box-shadow: none !important;
      border: 1px solid #6b7280 !important;
      border-radius: 0 !important;
      background-color: var(--color-main-background);
      cursor: var(--cursor-ar-default);
    }
    .leaflet-popup-tip {
      border-bottom: 1px solid #6b7280;
      border-right: 1px solid #6b7280;
      background-color: var(--color-main-background);
    }

    /* Tooltip */
    /* Base styles for the element that has a tooltip */
    .leaflet-tooltip {
      position: absolute;
      padding: 6px;
      background-color: var(--color-main-background);
      border: 1px solid #6b7280;
      border-radius: 0px;
      color: #222;
      white-space: nowrap;
      user-select: none;
      pointer-events: none;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);
    }
    .leaflet-tooltip.leaflet-interactive {
      cursor: pointer;
      pointer-events: auto;
    }
    .leaflet-tooltip-top:before,
    .leaflet-tooltip-bottom:before,
    .leaflet-tooltip-left:before,
    .leaflet-tooltip-right:before {
      position: absolute;
      pointer-events: none;
      border: 6px solid transparent;
      background: transparent;
      content: "";
    }

    /* Directions */

    .leaflet-tooltip-bottom {
      margin-top: 6px;
    }
    .leaflet-tooltip-top {
      margin-top: -6px;
    }
    .leaflet-tooltip-bottom:before,
    .leaflet-tooltip-top:before {
      left: 50%;
      margin-left: -6px;
    }
    .leaflet-tooltip-top:before {
      bottom: 0;
      margin-bottom: -12px;
      border-top-color: #6b7280;
    }
    .leaflet-tooltip-bottom:before {
      top: 0;
      margin-top: -12px;
      margin-left: -6px;
      border-bottom-color: #6b7280;
    }
    .leaflet-tooltip-left {
      margin-left: -6px;
    }
    .leaflet-tooltip-right {
      margin-left: 6px;
    }
    .leaflet-tooltip-left:before,
    .leaflet-tooltip-right:before {
      top: 50%;
      margin-top: -6px;
    }
    .leaflet-tooltip-left:before {
      right: 0;
      margin-right: -12px;
      border-left-color: #6b7280;
    }
    .leaflet-tooltip-right:before {
      left: 0;
      margin-left: -12px;
      border-right-color: #6b7280;
    }
    .leaflet-bottom {
      z-index: 1;
    }

    .mycluster {
      background-image: url("/map-point.svg");
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      /* border: 2px solid #6b7280;
      border-radius: 100%;
      background-color: var(--main-background); */
      color: white;
      text-align: center;
      font-size: 0.6rem;
      display: grid;
      place-items: center center;
    }
  </style>
</Main>
