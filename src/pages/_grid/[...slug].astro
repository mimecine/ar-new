---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import Main from "../../layouts/Main.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import Thumbnail from "../../components/Thumbnail.astro";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  let rooms = await getCollection("rooms");
  return rooms
    .filter((room) => room.data.hidden !== true)
    .map((room) => ({
      params: { slug: room.slug },
      props: room,
    }));
}
type Props = CollectionEntry<"rooms">;

const room = Astro.props;
const { Content } = await room.render();

const artists = await getCollection("artists");
const venues = await getCollection("venues");

const grid_tail_size = new Array(4 - (room.data.images.length % 4));
for (let i = 0; i < grid_tail_size.length; i++) {
  grid_tail_size[i] = i;
}
---

<Main
  title={room.data.title.replace(/,[^,]+$/, "")}
  x-data="{open: false}"
  x-id="['slide']">
  <main>
    <section class="w-full">
      <div>
        <ul class="flex flex-wrap gap-4 justify-between">
          {
            room.data.images?.map((image, i) => (
              <li
                x-data={`{slide:'slide${i}'}`}
                class="w-full md:w-1/3 lg:w-1/4 xl:w-1/5 xxl:w-1/6 p-0 md:p-4"
                @click.prevent="$refs[slide].scrollIntoView({behavior:'instant'}); $refs.dialog.showModal();  open=!open;">
                <Thumbnail
                  src={image}
                  alt={room.data.title}
                  title={room.data.title}
                />
              </li>
            ))
          }

          <!-- {grid_tail_size.map((v, i) => (
  <li class="h-0 w-full md:w-1/3 lg:w-1/4 xl:w-1/5 xxl:w-1/6 p-4">
    <div class="h-full p-2"> <div class="w-full h-64 flex justify-center items-center invisible"> 
      &nbsp;
    </div>  
  </li>
))} -->
        </ul>
      </div>

      <h2>
        {venues.find((a) => a.slug == room.data.venue)?.data.title}, {
          venues.find((a) => a.slug == room.data.venue)?.data.town
        }
      </h2>

      <h4>
        <FormattedDate date={room.data.startdate} /> - {
          (room.data.enddate && <FormattedDate date={room.data.enddate} />) ||
            `ONGOING`
        }
      </h4>
      <div class="max-w-4xl">
        <Content />
      </div>
      <div class="max-w-4xl">
        <h4>
          Read about the artist{room.data.artists.length > 1 && "s"}:
        </h4>
        {
          room.data.artists.map((artist, a, i) => (
            <>
              <a href={`/artists/${artist}`}>
                {artists.find((a) => a.slug == artist)?.data.title}
              </a>
              {i.length - 1 > a && <span>, </span>}
            </>
          ))
        }
      </div>
    </section>
  </main>

  <dialog
  id="dialog"
  x-ref="dialog"
  class="w-screen h-screen inset-0 z-[600] opacity-0 pointer-events-none transition-opacity duration-500 open:opacity-100 open:pointer-events-auto bg-gray-100 backdrop:bg-gray-800 backdrop:opacity-60"
  role="dialog"
  aria-modal="true">
  <div
    x-ref="slider"
    class="flex overflow-x-scroll items-start h-full snap-x snap-mandatory scroll-smooth">
    <button
      @click="$refs.dialog.close(); open=!open;"
      class="absolute leading-none right-2 top-2 focus-visible:outline-none z-10"
      ><Icon
        name="material-symbols-light:close"
        class="size-6 lg:size-12"
      /></button
    >
    <button
      @click="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider;  $refs.slider.scrollBy({left: -clientWidth, behavior:'smooth'});"
      @keyup.left.window="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: -clientWidth, behavior:'smooth'});"
      class="absolute left-0 top-1/2 leading-none focus-visible:outline-none z-10"
      ><Icon
        name="material-symbols-light:chevron-left"
        class="size-6 lg:size-12"
      /></button
    >
    <button
      @click="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: clientWidth, behavior:'smooth'});"
      @keyup.right.window="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: clientWidth, behavior:'smooth'});"
      class="absolute right-0 top-1/2 leading-none focus-visible:outline-none z-10"
      ><Icon
        name="material-symbols-light:chevron-right"
        class="size-6 lg:size-12"
      /></button
    >

    {
      room.data.images?.map((image, i, images) => (
        <div
          x-ref={`slide${i}`}
          class="relative flex-none w-full h-full p-2 grid grid-rows-[1fr,auto,auto] items-center justify-center snap-x snap-center text-sm font-thin">
          <div class="w-full h-[80vh]">
            <Image
              src={image}
              alt={room.data.title}
              title={room.data.title}
              widths={[360, 1600]}
              sizes={`(max-width: 360px) 360px, ${image.width}px`}
              x-widths={[360, 1600]}
              x-sizes={`(max-width: 360px) 360px, ${image.width}px`}
              class="object-contain max-w-full max-h-full "
            />
          </div>
        </div>
      ))
    }
  </div>
</dialog>

</Main>
