---
import { type CollectionEntry, getCollection, getEntry, render } from "astro:content";
import { Image } from "astro:assets";
import Main from "@src/layouts/Main.astro";
import { Icon } from "astro-icon/components";
import Thumbnail from "@src/components/Thumbnail.astro";
import FormattedDate from "@src/components/FormattedDate.astro";
import Video from "@src/components/Video.astro";

export async function getStaticPaths() {
  let artists = await getCollection("artists");
  return artists
    .filter((artist) => artist.data.hidden !== true)
    .map((artist) => ({
      params: { slug: artist.id },
      props: artist,
    }));
}
type Props = CollectionEntry<"artists">;

const artist = Astro.props;

const categories = ["painting", "sculpture"];
function  categorySort(a, b) { // sorts alphabetically by category but puts categories in the array first in that order
  const aIndex = categories.indexOf(a.category.toLowerCase());
  const bIndex = categories.indexOf(b.category.toLowerCase());
  if (aIndex === -1 && bIndex === -1) return a.category.localeCompare(b.category); // both not in categories
  if (aIndex === -1) return 1; // a not in categories, b is
  if (bIndex === -1) return -1; // b not in categories, a is
  return aIndex - bIndex; // both in categories, sort by index
}

let sortedWorks = artist.data.works
.sort((a, b) => {
  return categorySort(a,b) || a.year - b.year || a.title.split(",").pop().localeCompare(b.title.split(",").pop());
  // return a.category.localeCompare(b.category) ||  b.category.toLowerCase() == 'sculpture' ? 1:0 || b.category.toLowerCase() == 'painting' ? 1:0 || a.year - b.year || a.title.split(",").pop().localeCompare(b.title.split(",").pop());
}); // needs mod to sort by year

const { Content } = await render(artist);

const all_rooms = await getCollection("rooms");
const rooms = all_rooms
  .filter((room) => room.data.artists.includes(artist.id))
  .filter((room) => !room.data.hidden);
for (let room of rooms) {
  room.data._venue = await getEntry("venues", room.data.venue);
}

const all_films = await getCollection("films");
const films = all_films.filter((film) =>
  film.data.artists.includes(artist.id)
);
---

<Main title={`${artist.data.title}`} x-data="{ open: false }" data-pagefind-meta={`title:ARTIST - ${artist.data.title}`}>
  <main class="">
    <section>
      <div class="flex flex-wrap pb-12">
        <div class="md:w-1/2" >
          
            <Image
                width={artist.data.featuredImage.width}
                height={artist.data.featuredImage.height}
                widths={[360, 800]}
                sizes={`(max-width: 360px) 360px, 800px`}
                src={artist.data.featuredImage}
                alt={artist.data.title}
                loading="eager"
                class="mb-4 p-2 bg-gray-200 max-w-full w-auto object-cover opacity-0 transition-opacity duration-500"
                onload="this.classList.remove('opacity-0')"
              /> 
            
        </div>
        <div class="md:w-1/2 md:px-4 mt-2">
          <Content />
        </div>
      </div>

      <div>
        {sortedWorks.length > 0 && (
        <div class="flex flex-row gap-4 items-baseline">
          <h2 id="works">Works</h2>
        <>{rooms.length > 0 && (<h2 class="xpy-6 text-2xl"><a href="#rooms">Rooms</a></h2>)}</>
        <>{films.length > 0 && <h2 class="xpy-6 text-2xl"><a href="#films">Films</a></h2>}</>
      </div>

        <div class="xtext-sm pb-6">
          {sortedWorks.map(w => w.category).filter((value, index, array) => array.indexOf(value) === index).map((category,i,arr) => (
            <>{ i !== 0 && <span> / </span>}</>
            <>{ arr.length > 1 && <a href={`#${category}`} class="cursor-pointer hover:italic"> 
              {category}
            </a>}</>

            ))}
        </div>
        )}
        <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 justify-between">
          {
            sortedWorks.map((work, index) => (
              <li class="cursor-pointer" id={work.category}
                x-data={`{slide:'slide${index}'}`}
                @click="$refs.dialog.showModal();$refs[slide].scrollIntoView({behavior:'instant'}); open=!open;">
                <a href={`#[${index}]${work.title}`} id={`[${index}]${work.title}`}>
                  <Thumbnail src={work.src} alt={work.title} title={work.title} data-category={work.category} loading={index >= 8 ? `lazy`:`eager`}>
                  <div class="h-full">
                    {work.title && <h5 class="text-balance">{work.title}</h5>}
                    <p class="text-sm -my-2 italic">{work.category}</p>
                  </div>
                  </Thumbnail>
                </a>
              </li>
            ))
          }
        </ul>

        <dialog
          id="dialog"
          x-ref="dialog"
          @keydown.escape.window="$refs.dialog.close(); open=!open;"
          class="w-screen h-screen m-auto inset-0 z-600 opacity-0 pointer-events-none transition-opacity duration-500 open:opacity-100 open:pointer-events-auto bg-gray-100 backdrop:bg-gray-800/60"
          role="dialog"
          aria-modal="true">
          <div
            x-ref="slider"
            @scrollend="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider;$refs.button_prev.classList.toggle('opacity-10',scrollLeft === 0); $refs.button_next.classList.toggle('opacity-10',scrollLeft+clientWidth === scrollWidth);"
            class="flex overflow-x-scroll items-start h-full snap-x snap-mandatory scroll-smooth select-text focus-visible:outline-hidden scrollbar-hide
            ">
            <button
              @click="$refs.dialog.close(); open=!open;"
              class="absolute leading-none right-2 top-2 p-28 pr-0 pt-0 focus-visible:outline-hidden z-10"
              ><Icon
                name="material-symbols-light:close-rounded"
                class="size-12 lg:size-12"
              /></button
            >
            <button
              x-ref="button_prev"
              @click="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider;  $refs.slider.scrollBy({left: -clientWidth, behavior:'smooth'});"
              @keyup.left.window="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: -clientWidth, behavior:'smooth'});"
              class="absolute left-0 top-[30vh] bottom-[30vh] mt-auto p-28 pl-2 leading-none focus-visible:outline-hidden z-10 opacity-10 invisible md:visible"
              ><Icon
                name="material-symbols-light:arrow-back-ios-rounded"
                class="size-8 lg:size-8"
              /></button
            >
            <button
              x-ref="button_next"
              @click="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: clientWidth, behavior:'smooth'});"
              @keyup.right.window="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: clientWidth, behavior:'smooth'});"
              class="absolute right-0 top-[30vh] bottom-[30vh] mt-auto p-28 pr-0 leading-none focus-visible:outline-hidden z-10 invisible md:visible"
              ><Icon
                name="material-symbols-light:arrow-forward-ios-rounded"
                class="size-8 lg:size-8"
              /></button
            >

            { 
              sortedWorks.map((work, _i) => (
                <div
                x-ref={`slide${_i}`}
                id={`slide${_i}`}
                class="relative flex-none w-full h-full p-2 grid grid-rows-[1fr_auto_auto] items-center justify-center snap-x snap-center text-sm font-thin">
                  <div class="w-full h-[80vh] items-center content-center justify-center bg-no-repeat bg-center bg-[url('/SvgSpinners180RingWithBg.svg')]">
                    <Image
                      src={work.src}
                      alt={work.title}
                      title={work.title}
                      widths={[360, 1600]}
                      sizes={`(max-width: 360px) 360px, ${work.src.width}px`}
                      x-widths={[360, 1600]}
                      x-sizes={`(max-width: 360px) 360px, ${work.src.width}px`}
                      data-inventorynumber={work.inventorynumber}
                      data-info={work.info}
                      data-credit={work.credit}
                      data-category={work.category}
                      class="object-contain max-w-full max-h-full opacity-0 transition-opacity duration-500 "
                      onload="this.classList.remove('opacity-0')"
                    />

                  </div>
                  <div class="absolute bottom-0 p-2 items-center justify-evenly w-full grid md:grid-flow-col gap-x-8">
                    <div class="font-normal">{work.title}</div>
                    <div class="text-gray-400">{work.info}</div>
                    {/* <div class="italic text-gray-400">{work.credit.replace(new RegExp(work.inventorynumber,"i"),'')}</div> */}
                    <div class="italic text-gray-400">
                      {work.credit.split("\n")[0]}
                    </div>
                    <div class="uppercase italic font-normal">
                      #{work.inventorynumber} <span 
                        @click.prevent={`work = ${JSON.stringify(work)}; work.artist = '${artist.data.title}'; work.image = document.querySelector('#slide${_i} img').src; if(true || !portfolio.some(w => w.inventorynumber === work.inventorynumber)){portfolio.push(work)}`} 
                        class="text-gray-400 text-2xl cursor-pointer active:text-green-500 active:text-4xl"> + </span>
                    </div>
                  </div>
                </div>
              ))
            }
          </div>
        </dialog>

        <div>
          {rooms.length > 0 && 
          <div class="flex flex-row gap-4 items-baseline">
            <h2 class="py-6 " id="rooms">Rooms</h2>
            <>{sortedWorks.length > 0 && (<h2 class="py-6 text-2xl"><a href="#works">Works</a></h2>)}</>
            <>{films.length > 0 && <h2 class="py-6 text-2xl"><a href="#films">Films</a></h2>}</>
        </div> }

          <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 justify-between">
            {rooms
                .sort(
                  (a, b) =>
                    new Date(a.data.startdate).getTime() -
                    new Date(b.data.startdate).getTime()
                )
                .reverse()
                .map((room) => (
                  <li>
                    <a href={`/rooms/${room.id}`}>
                      <Thumbnail
                        src={room.data.images[0].src}
                        alt={room.data.title}
                        title={room.data.title}>
                        <div class="h-full">
                          {room.data.title && (
                            <h5 class="text-balance">{room.data.title}</h5>
                          )}
                          <p class="text-sm -my-2 italic">
                            <FormattedDate date={room.data.startdate} /> -{" "}
                            {(room.data.enddate && (
                              <FormattedDate date={room.data.enddate} />
                            )) ||
                              `ONGOING`}
                          </p>
                        </div>
                      </Thumbnail>
                    </a>
                  </li>
                ))
            }
          </ul>
        </div>

            <div>
          {films.length > 0 && 
          <div class="flex flex-row gap-4 items-baseline">
            <h2 class="py-6 " id="films">Films</h2>
            <>{sortedWorks.length > 0 && (<h2 class="py-6 text-2xl"><a href="#works">Works</a></h2>)}</>
            <>{films.length > 0 && <h2 class="py-6 text-2xl"><a href="#rooms">Rooms</a></h2>}</>
          </div> }
            <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 justify-between">
                {films.map((film) => (
                  <li class="film cursor-pointer">
                    <Video
                      src={film.data.url}
                      alt={film.data.title}
                      title={film.data.title}>
                      <div class="h-full">
                        <h5 class="text-balance">
                          {film.data.title.replace(/ARTIST ROOMS:?/, "")}
                        </h5>
                      </div>
                    </Video>
                  </li>
                ))}
              </ul>
            </div>
      </div>
    </section>
  </main>
</Main>

