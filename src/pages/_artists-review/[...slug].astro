---
import { type CollectionEntry, getCollection, getEntry } from "astro:content";
import { Image } from "astro:assets";
import MainReview from "../../layouts/MainReview.astro";
import { Icon } from "astro-icon/components";
import Thumbnail from "../../components/Thumbnail.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import Video from "../../components/Video.astro";

export async function getStaticPaths() {
  let artists = await getCollection("artists");
  return artists
    .filter((artist) => artist.data.hidden !== true)
    .map((artist) => ({
      params: { slug: artist.slug },
      props: artist,
    }));
}
type Props = CollectionEntry<"artists">;

const artist = Astro.props;

let sortedWorks = artist.data.works
.sort((a, b) => {
  return b.category.toLowerCase() == 'sculpture' ? 1:0 || a.category.localeCompare(b.category) ||  a.year - b.year || a.title.split(",").pop().localeCompare(b.title.split(",").pop());
}); // needs mod to sort by year

const { Content } = await artist.render();

const all_rooms = await getCollection("rooms");
const rooms = all_rooms
  .filter((room) => room.data.artists.includes(artist.slug))
  .filter((room) => !room.data.hidden);
for (let room of rooms) {
  room.data._venue = await getEntry("venues", room.data.venue);
}

const all_films = await getCollection("films");
const films = all_films.filter((film) =>
  film.data.artists.includes(artist.slug)
);
---

<MainReview title={`${artist.data.title} / James Review`} x-data="{ open: false }">
  <main data-pagefind-ignore>
    <section>
      <div class="flex flex-wrap">
        <div class="md:w-1/2 xpx-4">
          {
            artist.data.featuredImage && (
              <Image
                widths={[360, 1600]}
                sizes={`(max-width: 360px) 360px, 1600px`}
                src={artist.data.featuredImage}
                alt={artist.data.title}
                class="xp-4 p-2 bg-gray-200 xpx-0 xpy-4 xmd:px-6 xmd:py-0 max-w-full w-auto object-cover"
              />
            )
          }
        </div>
        <div class="md:w-1/2 md:px-4">
          <Content />
        </div>
      </div>

      <div>
        {sortedWorks.length > 0 && <h2 class="py-6">Works</h2>}
        <ul class="grid grid-cols-1 xmd:grid-cols-2 xlg:grid-cols-4 gap-6 justify-between">
          {
            sortedWorks.map((work, i) => (
              <li class="cursor-pointer"
                x-data={`{slide:'slide${i}'}`}
                @click.prevent="$refs.dialog.showModal();$refs[slide].scrollIntoView({behavior:'instant'});   open=!open;">
<Image
                      src={work.src}
                      alt={work.title}
                      title={work.title}
                      widths={[360, 1600]}
                      sizes={`(max-width: 360px) 360px, ${work.src.width}px`}
                      x-widths={[360, 1600]}
                      x-sizes={`(max-width: 360px) 360px, ${work.src.width}px`}
                      data-inventorynumber={work.inventorynumber}
                      data-info={work.info}
                      data-credit={work.credit}
                      data-category={work.category}
                      class="object-contain max-w-full max-h-full "
                    />
                                  <div class="h-full">
                    
                                    <div class="font-normal">{work.title}</div>
                    <div class="text-gray-400">{work.category}: {work.info}</div>
                    {/* <div class="italic text-gray-400">{work.credit.replace(new RegExp(work.inventorynumber,"i"),'')}</div> */}
                    <div class="italic text-gray-400">
                      {work.credit.split("\n")[0]}
                    </div>
                    <div class="uppercase italic font-normal border-b-2 border-current pb-4">
                      #{work.inventorynumber}
                    </div>


                  </div>
                
              </li>
            ))
          }
        </ul>

        <dialog
          id="dialog"
          x-ref="dialog"
          class="w-screen h-screen inset-0 z-[600] opacity-0 pointer-events-none transition-opacity duration-500 open:opacity-100 open:pointer-events-auto bg-gray-100 backdrop:bg-gray-800 backdrop:opacity-60"
          role="dialog"
          aria-modal="true">
          <div
            x-ref="slider"
            @scrollend="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider;$refs.button_prev.classList.toggle('opacity-10',scrollLeft === 0); $refs.button_next.classList.toggle('opacity-10',scrollLeft+clientWidth === scrollWidth);"
            class="flex overflow-x-scroll items-start h-full snap-x snap-mandatory scroll-smooth select-text">
            <button
              @click="$refs.dialog.close(); open=!open;"
              class="absolute leading-none right-2 top-2 focus-visible:outline-none z-10"
              ><Icon
                name="material-symbols-light:close"
                class="size-12 lg:size-12"
              /></button
            >
            <button
              x-ref="button_prev"
              @click="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider;  $refs.slider.scrollBy({left: -clientWidth, behavior:'smooth'});"
              @keyup.left.window="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: -clientWidth, behavior:'smooth'});"
              class="absolute left-0 top-1/2 leading-none focus-visible:outline-none z-10 opacity-10 invisible md:visible"
              ><Icon
                name="material-symbols-light:chevron-left"
                class="size-8 lg:size-20"
              /></button
            >
            <button
              x-ref="button_next"
              @click="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: clientWidth, behavior:'smooth'});"
              @keyup.right.window="let {scrollLeft, clientWidth, scrollWidth} = $refs.slider; $refs.slider.scrollBy({left: clientWidth, behavior:'smooth'});"
              class="absolute right-0 top-1/2 leading-none focus-visible:outline-none z-10 invisible md:visible"
              ><Icon
                name="material-symbols-light:chevron-right"
                class="size-8 lg:size-20"
              /></button
            >

            { 
              sortedWorks.map((work, _i) => (
                <div
                x-ref={`slide${_i}`}
                id={`slide${_i}`}
                class="relative flex-none w-full h-full p-2 grid grid-rows-[1fr,auto,auto] items-center justify-center snap-x snap-center text-sm font-thin">
                  <div class="w-full h-[80vh] items-center content-center justify-center" >
                    <Image
                      src={work.src}
                      alt={work.title}
                      title={work.title}
                      widths={[360, 1600]}
                      sizes={`(max-width: 360px) 360px, ${work.src.width}px`}
                      x-widths={[360, 1600]}
                      x-sizes={`(max-width: 360px) 360px, ${work.src.width}px`}
                      data-inventorynumber={work.inventorynumber}
                      data-info={work.info}
                      data-credit={work.credit}
                      data-category={work.category}
                      class="object-contain max-w-full max-h-full "
                    />
                  </div>
                  <div class="absolute bottom-0 p-2 items-center justify-evenly w-full grid md:grid-flow-col gap-x-8">
                    <div class="font-normal">{work.title}</div>
                    <div class="text-gray-400">{work.category}: {work.info}</div>
                    {/* <div class="italic text-gray-400">{work.credit.replace(new RegExp(work.inventorynumber,"i"),'')}</div> */}
                    <div class="italic text-gray-400">
                      {work.credit.split("\n")[0]}
                    </div>
                    <div class="uppercase italic font-normal">
                      #{work.inventorynumber} 
                    </div>
                    {/* <div class="text-xs">{work.category}</div> */}
                  </div>
                </div>
              ))
            }
          </div>
        </dialog>

        <div>
          {rooms.length > 0 && <h2 class="py-6">Rooms</h2>}

          <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 justify-between">
            {rooms
                .sort(
                  (a, b) =>
                    new Date(a.data.startdate).getTime() -
                    new Date(b.data.startdate).getTime()
                )
                .reverse()
                .map((room) => (
                  <li>
                    <a href={`/rooms-review/${room.slug}`}>
                      <Thumbnail
                        src={room.data.images[0].src}
                        alt={room.data.title}
                        title={room.data.title}>
                        <div class="h-full">
                          {room.data.title && (
                            <h5 class="text-balance">{room.data.title}</h5>
                          )}
                          <p class="text-sm my-[-0.5rem] italic">
                            <FormattedDate date={room.data.startdate} /> -{" "}
                            {(room.data.enddate && (
                              <FormattedDate date={room.data.enddate} />
                            )) ||
                              `ONGOING`}
                          </p>
                        </div>
                      </Thumbnail>
                    </a>
                  </li>
                ))
            }
          </ul>
        </div>

        {films.length > 0 && (
            <div>
              <h2 class="py-6">Films</h2>
              <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 justify-between">
                {films.map((film) => (
                  <li class="film cursor-pointer">
                    <Video
                      src={film.data.url}
                      alt={film.data.title}
                      title={film.data.title}>
                      <div class="h-full">
                        <h5 class="text-balance">
                          {film.data.title.replace(/ARTIST ROOMS:?/, "")}
                        </h5>
                      </div>
                    </Video>
                  </li>
                ))}
              </ul>
            </div>
          )
        }
      </div>
    </section>
  </main>
</MainReview>